╔═══════════════════════════════════════════════════════════════╗
║          📖 ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ GIT - Реальные ситуации   ║
╚═══════════════════════════════════════════════════════════════╝


┌─────────────────────────────────────────────────────────────┐
│  ✅ СЦЕНАРИЙ 1: Вы исправили баг                            │
└─────────────────────────────────────────────────────────────┘

Что вы сделали:
- Исправили ошибку в файле stasis_handler_optimized.py

Как закоммитить:

cd /root/Asterisk_bot/GIT_QUICK_PUSH
./quick_push.sh "Исправил баг с зависанием бота после первого вопроса"

✅ Готово! Изменения на GitHub!


┌─────────────────────────────────────────────────────────────┐
│  ✅ СЦЕНАРИЙ 2: Добавили новую функцию                      │
└─────────────────────────────────────────────────────────────┘

Что вы сделали:
- Добавили новую функцию обработки голоса
- Создали файл new_feature.py

Как закоммитить:

cd /root/Asterisk_bot/GIT_QUICK_PUSH
./quick_push.sh "Добавил новую функцию распознавания эмоций в голосе"

✅ Готово!


┌─────────────────────────────────────────────────────────────┐
│  ✅ СЦЕНАРИЙ 3: Обновили документацию                       │
└─────────────────────────────────────────────────────────────┘

Что вы сделали:
- Дополнили README.md
- Исправили опечатки в документации

Как закоммитить:

cd /root/Asterisk_bot/GIT_QUICK_PUSH
./quick_push.sh "Обновил документацию и исправил опечатки"

✅ Готово!


┌─────────────────────────────────────────────────────────────┐
│  ✅ СЦЕНАРИЙ 4: Изменили конфигурацию                       │
└─────────────────────────────────────────────────────────────┘

Что вы сделали:
- Поменяли настройки в .env
- Обновили prompts.json

Как закоммитить:

cd /root/Asterisk_bot/GIT_QUICK_PUSH
./quick_push.sh "Обновил конфигурацию: изменил модель AI на gpt-4"

✅ Готово!


┌─────────────────────────────────────────────────────────────┐
│  ✅ СЦЕНАРИЙ 5: Оптимизировали производительность           │
└─────────────────────────────────────────────────────────────┘

Что вы сделали:
- Ускорили TTS
- Добавили кеширование

Как закоммитить:

cd /root/Asterisk_bot/GIT_QUICK_PUSH
./quick_push.sh "Оптимизация: ускорил TTS и добавил кеширование embeddings"

✅ Готово!


┌─────────────────────────────────────────────────────────────┐
│  ✅ СЦЕНАРИЙ 6: Работа вручную (без скрипта)                │
└─────────────────────────────────────────────────────────────┘

Если хотите больше контроля, делайте вручную:

cd /root/Asterisk_bot

# 1. Посмотреть что изменилось
git status

# 2. Добавить только конкретные файлы (не все)
git add stasis_handler.py
git add parallel_tts.py

# 3. Создать коммит
git commit -m "Исправил обработку ошибок в TTS"

# 4. Отправить на GitHub
git push origin main

✅ Готово!


┌─────────────────────────────────────────────────────────────┐
│  ✅ СЦЕНАРИЙ 7: Получить изменения с другого компьютера     │
└─────────────────────────────────────────────────────────────┘

Вы работаете с другого сервера и хотите получить последние изменения:

cd /root/Asterisk_bot
git pull origin main

✅ Все последние изменения скачаны!


┌─────────────────────────────────────────────────────────────┐
│  ✅ СЦЕНАРИЙ 8: Посмотреть историю изменений                │
└─────────────────────────────────────────────────────────────┘

Хотите увидеть что менялось в проекте:

cd /root/Asterisk_bot
git log --oneline

Вывод будет примерно таким:
cd52ac0 Initial commit: Asterisk Voice Bot - полный проект
ab12cd3 Исправил баг с зависанием
ef34gh5 Добавил новую функцию TTS

✅ Видите всю историю!


┌─────────────────────────────────────────────────────────────┐
│  ✅ СЦЕНАРИЙ 9: Проверить перед push                        │
└─────────────────────────────────────────────────────────────┘

Хотите убедиться что добавляете правильные файлы:

cd /root/Asterisk_bot

# Посмотреть статус
git status

# Посмотреть детальные изменения в файле
git diff stasis_handler.py

# Посмотреть что будет в коммите
git diff --cached

✅ Всё проверено, можно делать push!


┌─────────────────────────────────────────────────────────────┐
│  ✅ СЦЕНАРИЙ 10: Создали бекап - нужно закоммитить          │
└─────────────────────────────────────────────────────────────┘

Вы создали бекап и хотите сохранить изменения:

cd /root/Asterisk_bot/GIT_QUICK_PUSH
./quick_push.sh "Обновил систему бекапов и добавил автоочистку"

✅ Готово!


┌─────────────────────────────────────────────────────────────┐
│  💡 СОВЕТЫ ПО ОПИСАНИЯМ КОММИТОВ                            │
└─────────────────────────────────────────────────────────────┘

✅ ХОРОШИЕ описания:
   "Исправил баг с зависанием бота"
   "Добавил поддержку Redis для кеширования"
   "Обновил документацию по установке"
   "Оптимизация: ускорил TTS на 50%"
   "Рефакторинг: упростил код в ai_agent.py"

❌ ПЛОХИЕ описания:
   "фикс"               → Что исправили?
   "обновление"         → Что обновили?
   "123"                → Бессмысленно
   "изменения"          → Какие изменения?
   "работает"           → Что работает?


┌─────────────────────────────────────────────────────────────┐
│  🎯 ШАБЛОНЫ ОПИСАНИЙ                                        │
└─────────────────────────────────────────────────────────────┘

Для багов:
"Исправил [описание бага]"
"Фикс: [что было сломано]"

Для новых функций:
"Добавил [название функции]"
"Реализовал [что сделали]"

Для оптимизации:
"Оптимизация: [что ускорили]"
"Улучшил производительность [чего]"

Для документации:
"Обновил документацию: [что добавили]"
"Добавил инструкцию по [чему]"

Для конфигурации:
"Изменил настройки: [что поменяли]"
"Обновил конфиг: [зачем]"


════════════════════════════════════════════════════════════════

           Используйте эти примеры как шаблоны! 🎯

════════════════════════════════════════════════════════════════

